#version 460 core

layout (set = 0, binding = 0) readonly buffer MatrixA
{
  float m[]; // 
} A;

layout (set = 0, binding = 1) readonly buffer MatrixB
{
  float m[];
} B;

layout (set = 0, binding = 2) buffer MatrixC
{
  float m[];
} C;

layout (push_constant) uniform PushConsts
{
  uint A_rows;  
  uint A_cols;  
  uint B_rows; 
  uint B_cols;
} pc;

layout (local_size_x_id = 0) in;
layout (local_size_y_id = 0) in;

layout (local_size_x = 8, local_size_y = 4) in;

void main()
{
  uint colId = gl_GlobalInvocationID.x;
  uint rowId = gl_GlobalInvocationID.y;

  // A rows x B cols

  if (rowId >= pc.A_rows || colId >= pc.B_cols)
    return;

  float sum = 0.f;
  uint K = pc.A_cols;

  for (uint i = 0; i < pc.A_cols; i++)
    sum += A.m[rowId * pc.A_cols + i] * B.m[i * pc.B_cols + colId];
  
  C.m[rowId * pc.B_cols + colId] = sum;
}